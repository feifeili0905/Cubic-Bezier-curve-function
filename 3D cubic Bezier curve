function [A1,B1,C1,A2,B2,C2,path_Len,xx,yy,zz]=bezier3d(x_center,x0,vector_in,vector_out,R_curv)
% -------------------------------------------------------------------------
% - This function code is for the 3d bezier curve
% - input: the vector of input, the driving vector of output, the
% requirement for the turning radius, the center of the GA, the location of
% the targets.
% - Output the location of the two control points(A1,B1,C1)(A2,B2,C2), the
% 3d bezier curve path length, the location of the 3d bezier curve(xx,yy,zz)
% -------------------------------------------------------------------------
%the following are the example of the input
% x0=[0 0 0;0 0 0];
% vector_in=[1 1 5];
% vector_out=[2 3 10];
% R_curv=1;
n_controlpoint=5; % the number of the control points on each control point line
% 
% vector_in=unmatrix(vector_in);
% vector_out=unmatrix(vector_out);

u=0:0.01:1;
mu=size(u,2);

if (x0(1,1)==0) && (x0(2,1)==0) && (x0(1,2)==0) && (x0(2,2)==0) && (x0(1,3)==0) && (x0(2,3)==0)
    path_Len=0;
    xx=x_center(1,1)*ones(1,mu);
    yy=x_center(1,2)*ones(1,mu);
    zz=x_center(1,3)*ones(1,mu);
    A1=x_center(1,1);
    B1=x_center(1,1);
    C1=x_center(1,1);
    A2=x_center(1,1);
    B2=x_center(1,1);
    C2=x_center(1,1);
    k=inf;
elseif (x0(1,1)==x_center(1,1)) && (x0(2,1)==0) && (x0(1,2)==x_center(1,2)) && (x0(2,2)==0) && (x0(1,3)==x_center(1,3)) && (x0(2,3)==0)
    path_Len=0;
    xx=x_center(1,1)*ones(1,mu);
    yy=x_center(1,2)*ones(1,mu);
    zz=x_center(1,3)*ones(1,mu);
    A1=x_center(1,1);
    B1=x_center(1,1);
    C1=x_center(1,1);
    A2=x_center(1,1);
    B2=x_center(1,1);
    C2=x_center(1,1);
    k=inf;
% A0=x0(1,1);
% B0=x0(1,2);
% C0=x0(1,3);
% A3=x0(2,1);
% B3=x0(2,2);
% C3=x0(2,3);
else
A_1=vector_in(1,1);
B_1=vector_in(1,2);
C_1=vector_in(1,3);
A_2=vector_out(1,1);
B_2=vector_out(1,2);
C_2=vector_out(1,3);
d=sqrt((x0(1,1)-x0(2,1))^2+(x0(1,2)-x0(2,2))^2+(x0(1,3)-x0(2,3))^2);
nd=d./n_controlpoint;

t1=nd:nd:(d-nd);
t2=nd:nd:(d-nd);
A1=x0(1,1)+vector_in(1,1)*t1;
B1=x0(1,2)+vector_in(1,2)*t1;
C1=x0(1,3)+vector_in(1,3)*t1;
A2=x0(2,1)-vector_out(1,1)*t2;
B2=x0(2,2)-vector_out(1,2)*t2;
C2=x0(2,3)-vector_out(1,3)*t2;



xy1=[A1' B1' C1'];
xy2=[A2' B2' C2'];

mxy1=size(xy1,1);
mxy2=size(xy2,1);

for ii=1:mxy2
    for i=1:mxy1
        n=(ii-1)*mxy1+i;
        xy(n,:)=[xy1(i,:) xy2(ii,:)];
    end
end

N1=size(xy,1);
% A1=xy(:,1);
% B1=xy(:,2);
% C1=xy(:,3);
% A2=xy(:,4);
% B2=xy(:,5);
% C2=xy(:,6);


x_x=x0(1,1).*(1-u).^3 + 3*xy(:,1).*u.*(1-u).^2 + 3*xy(:,4).*u.^2.*(1-u) + x0(2,1).*u.^3;
y_y=x0(1,2).*(1-u).^3 + xy(:,2).*3*u.*(1-u).^2 + 3*xy(:,5).*u.^2.*(1-u) + x0(2,2).*u.^3;
z_z=x0(1,3).*(1-u).^3 + 3*xy(:,3).*u.*(1-u).^2 + 3*xy(:,6).*u.^2.*(1-u) + x0(2,3).*u.^3;

dx=diff(x_x,1,2);
dy=diff(y_y,1,2);
dz=diff(z_z,1,2);
dl=sqrt(dx.^2+dy.^2+dz.^2);
path_Len=sum(dl,2);

x_1=3*(xy(:,1)-x0(1,1))*(1-u).^2+6*(xy(:,4)-xy(:,1))*(1-u).*u +3*(x0(2,1)-xy(:,4))*u.^2;
y_1=3*(xy(:,2)-x0(1,2))*(1-u).^2+6*(xy(:,5)-xy(:,2))*(1-u).*u +3*(x0(2,2)-xy(:,5))*u.^2;
z_1=3*(xy(:,3)-x0(1,3))*(1-u).^2+6*(xy(:,6)-xy(:,3))*(1-u).*u +3*(x0(2,3)-xy(:,6))*u.^2;
x_2=6*(xy(:,4)-2*xy(:,1)+x0(1,1))*(1-u)+6*(x0(2,1)-2*xy(:,4)+xy(:,1))*u;
y_2=6*(xy(:,5)-2*xy(:,2)+x0(1,2))*(1-u)+6*(x0(2,2)-2*xy(:,5)+xy(:,2))*u;
z_2=6*(xy(:,6)-2*xy(:,3)+x0(1,3))*(1-u)+6*(x0(2,3)-2*xy(:,6)+xy(:,3))*u;

mx_1=size(x_1,1);

for i=1:mx_1
    r_1(:,:,i)=[x_1(i,:)' y_1(i,:)' z_1(i,:)'];
    r_2(:,:,i)=[x_2(i,:)' y_2(i,:)' z_2(i,:)'];
    R(:,:,i)=cross(r_1(:,:,i),r_2(:,:,i));
end
for j=1:mx_1
for i=1:mu
    Rn(i,:,j)=norm(R(i,:,j));
    R_1(i,:,j)=norm(r_1(i,:,j));
    R_11(i,:,j)=R_1(i,:,j)^3;
end
end

k=R_11./Rn;


for i=1:mx_1
    for j=1:size(k,1)
        if (k(j,:,i)) < R_curv
            dl(i,j)=inf;
            path_Len(i)=inf;
        end
    end
end


[~,index]=min(path_Len);
xx=x_x(index,:);
yy=y_y(index,:);
zz=z_z(index,:);
A1=xy(index,1);
B1=xy(index,2);
C1=xy(index,3);
A2=xy(index,4);
B2=xy(index,5);
C2=xy(index,6);
path_Len=path_Len(index);
end
end
